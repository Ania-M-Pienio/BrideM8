{"version":3,"sources":["components/MainContainer.js","components/Setting.js","components/SettingContainer.js","components/Logo.js","components/AppBar.js","components/Splash.js","App.js","serviceWorker.js","index.js"],"names":["MainContainer","state","seasonChoice","timeChoice","colorChoice","className","Component","Setting","props","SettingContainer","Logo","AppBar","Splash","App","isIntro","this","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMA6BeA,E,YAxBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,aAAc,GACdC,WAAY,GACZC,YAAa,IALH,E,sEAWZ,OACE,0BAAMC,UAAU,iBAAhB,qB,GAdsBC,aCObC,EARC,SAACC,GACf,OACE,yBAAKH,UAAU,aCgBJI,E,YAhBb,aAAe,IAAD,8BACZ,+CACKR,MAAQ,GAFD,E,sEAMZ,OACE,yBAAKI,UAAU,oBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAXuBC,aCShBI,EAVF,SAAAF,GACX,OACA,yBAAKH,UAAU,QACb,yBAAKA,UAAU,iBCiBJM,E,YAhBb,aAAe,IAAD,8BACZ,+CACKV,MAAQ,GAFD,E,sEAOZ,OACE,yBAAKI,UAAU,UACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZaC,aCiBNM,E,YAjBb,aAAe,IAAD,8BACZ,+CACKX,MAAQ,GAFD,E,sEAOZ,OACE,6BAASI,UAAU,UAAnB,c,GAVeC,aCqBNO,G,kBAhBb,aAAe,IAAD,8BACZ,+CACKZ,MAAQ,CACXa,SAAS,GAHC,E,sEAOZ,OACE,yBAAKT,UAAU,eACZU,KAAKd,MAAMa,QAAU,GAAK,kBAAC,EAAD,MAC1BC,KAAKd,MAAMa,QAAU,kBAAC,EAAD,MAAa,kBAAC,EAAD,W,GAXzBR,cCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34c8c4e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass MainContainer extends Component {\r\n  // Main Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      seasonChoice: '',\r\n      timeChoice: '',\r\n      colorChoice: '',\r\n    }\r\n  }\r\n\r\n  // Render \r\n  render() {\r\n    return (\r\n      <main className=\"mainContainer\"> \r\n        MainContainer\r\n\r\n   \r\n\r\n\r\n\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\n\r\nconst Setting = (props) => {\r\n  return (\r\n    <div className=\"setting\">\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Setting;\r\n","import React, { Component } from \"react\";\r\nimport Setting from './Setting';\r\n\r\nclass SettingContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"settingContainer\">\r\n        <Setting />\r\n        <Setting />\r\n        <Setting />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingContainer;","import React from 'react';\r\n\r\nconst Logo = props => {\r\n  return (\r\n  <div className=\"logo\">\r\n    <div className=\"logoBorder\">\r\n      \r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\r\nimport SettingContainer from \"./SettingContainer\";\r\nimport Logo from \"./Logo\";\r\n\r\nclass AppBar extends Component {\r\n  // Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  //Render\r\n  render() {\r\n    return (\r\n      <nav className=\"appBar\">\r\n        <Logo />\r\n        <SettingContainer />\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Splash extends Component {\r\n  // Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n    return (\r\n      <section className=\"splash\">\r\n        Splash\r\n\r\n\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Splash;\r\n","import React, { Component } from \"react\";\nimport MainContainer from \"./components/MainContainer\";\nimport AppBar from \"./components/AppBar\";\nimport Splash from \"./components/Splash\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isIntro: false\n    };\n  }\n  render() {\n    return (\n      <div className=\"wrapper App\">\n        {this.state.isIntro ? '' : <AppBar />}\n        {this.state.isIntro ? <Splash /> : <MainContainer />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}