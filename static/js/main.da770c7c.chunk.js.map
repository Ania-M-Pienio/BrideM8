{"version":3,"sources":["assets/BM8.png","components/MainContainer.js","components/Setting.js","components/SettingContainer.js","components/Logo.js","components/AppBar.js","components/Splash.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainContainer","state","seasonChoice","timeChoice","colorChoice","className","Component","Setting","graphic","graphics","type","icon","thisGraphic","this","props","includes","filter","i","setState","console","log","SettingContainer","isSeason","isTime","isColor","Logo","src","m8","alt","AppBar","onStartOver","Splash","onClick","onStart","library","add","fab","faUmbrella","faSnowflake","faLeaf","faSun","faUmbrellaBeach","faMoon","faCloudRain","faPalette","App","handleStart","isIntro","handleStartOver","season","time","colorSet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,iC,wKC0B5BC,E,YArBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,aAAc,GACdC,WAAY,GACZC,YAAa,IALH,E,sEAWZ,OACE,0BAAMC,UAAU,sB,GAdMC,a,QC2CbC,E,YA1Cb,aAAe,IAAD,8BACZ,+CACKN,MAAQ,CACXO,QAAS,GACTC,SAAU,CACR,CAAEC,KAAM,SAAUC,KAAM,aACxB,CAAED,KAAM,SAAUC,KAAM,QACxB,CAAED,KAAM,SAAUC,KAAM,kBACxB,CAAED,KAAM,OAAQC,KAAM,cACtB,CAAED,KAAM,MAAOC,KAAM,OACrB,CAAED,KAAM,MAAOC,KAAM,QACrB,CAAED,KAAM,QAASC,KAAM,aAXf,E,iFAgBO,IACfC,EADc,OAQlBA,GALIC,KAAKC,MAAMH,KAAKI,SAAS,KACnBF,KAAKZ,MAAMQ,SAASO,QAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEP,QAElCG,KAAKZ,MAAMQ,SAASO,QAAO,SAAAC,GAAC,OAAIA,EAAEP,OAAS,EAAKI,MAAMH,SAE5C,GACpBE,KAAKK,SAAS,CACZV,QAASI,IACR,WACDO,QAAQC,IAAI,EAAKnB,MAAMO,c,+BAKzB,OACE,yBAAKH,UAAU,WACb,kBAAC,IAAD,CAAiBM,KAAME,KAAKZ,MAAMO,QAAQG,OAC1C,4BAAKE,KAAKZ,MAAMO,QAAQE,W,GArCVJ,aCuBPe,E,YAtBb,aAAe,IAAD,8BACZ,+CACKpB,MAAQ,CACXqB,SAAU,SACVC,OAAQ,MACRC,QAAS,mBALC,E,sEAWZ,OACE,yBAAKnB,UAAU,oBACZQ,KAAKZ,MAAMqB,SAAW,kBAAC,EAAD,CAASX,KAAME,KAAKZ,MAAMqB,WAAe,GAC/DT,KAAKZ,MAAMsB,OAAS,kBAAC,EAAD,CAASZ,KAAME,KAAKZ,MAAMsB,SAAa,GAC3DV,KAAKZ,MAAMuB,QAAU,kBAAC,EAAD,CAASb,KAAME,KAAKZ,MAAMuB,UAAc,Q,GAhBvClB,a,iBCUhBmB,EAVF,SAAAX,GACX,OACA,yBAAKT,UAAU,QACb,yBAAKA,UAAU,cACZ,yBAAKqB,IAAKC,IAAIC,IAAI,uBCiBVC,E,YAlBb,aAAe,IAAD,8BACZ,+CACK5B,MAAQ,GAFD,E,sEAOZ,OACE,yBAAKI,UAAU,UACX,4BAAQA,UAAU,WAChB,kBAAC,EAAD,CAAMyB,YAAajB,KAAKC,MAAMgB,eAElC,kBAAC,EAAD,W,GAdaxB,aC8BNyB,E,YA7Bb,aAAe,IAAD,8BACZ,+CACK9B,MAAQ,GAFD,E,sEAOZ,OACE,6BAASI,UAAU,UACjB,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,qDACA,4BACE,qCADF,YAC2B,qCAD3B,UAEE,6BACA,qCAHF,gBAIE,6BACA,qCALF,aAME,qCANF,UAMyB,qCANzB,UAMgD,6BAC9C,qCAPF,UAQE,qCARF,aAUA,4BAAQK,KAAK,SAASsB,QAASnB,KAAKC,MAAMmB,SAA1C,oB,GAzBa3B,a,4BCgBjB4B,IAAQC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,K,IA2CSC,E,YAvCb,aAAe,IAAD,8BACZ,+CAUHC,YAAc,WACZ,EAAK5B,SAAS,CACZ6B,SAAS,KAbE,EAiBfC,gBAAkB,aAdf,EAAK/C,MAAQ,CACX8C,SAAS,EACTE,OAAQ,GACRC,KAAM,GACNC,SAAU,IAPA,E,sEAuBZ,OACE,yBAAK9C,UAAU,eACZQ,KAAKZ,MAAM8C,QACV,GAEA,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQjB,YAAajB,KAAKmC,kBAC1B,8BAGHnC,KAAKZ,MAAM8C,QAAU,kBAAC,EAAD,CAAQd,QAASpB,KAAKiC,cAAiB,kBAAC,EAAD,W,GAlCnDxC,aCnBE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.da770c7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BM8.d39d8259.png\";","import React, { Component } from \"react\";\r\n\r\n\r\nclass MainContainer extends Component {\r\n  // Main Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      seasonChoice: '',\r\n      timeChoice: '',\r\n      colorChoice: '',\r\n    }\r\n  }\r\n\r\n  // Render \r\n  render() {\r\n    return (\r\n      <main className=\"mainContainer\">   \r\n\r\n\r\n\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainContainer;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nclass Setting extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      graphic: {},\r\n      graphics: [\r\n        { type: \"winter\", icon: \"snowflake\" },\r\n        { type: \"spring\", icon: \"leaf\" },\r\n        { type: \"summer\", icon: \"umbrella-beach\" },\r\n        { type: \"fall\", icon: \"cloud-rain\" },\r\n        { type: \"day\", icon: \"sun\" },\r\n        { type: \"eve\", icon: \"moon\" },\r\n        { type: \"color\", icon: \"palette\" },\r\n      ]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let thisGraphic = \"\";\r\n    let icons = [];\r\n    if (this.props.icon.includes(\"_\")) {\r\n      icons = this.state.graphics.filter(i => i.type === \"color\");\r\n    } else {\r\n      icons = this.state.graphics.filter(i => i.type === this.props.icon);\r\n    }\r\n    thisGraphic = icons[0];\r\n    this.setState({\r\n      graphic: thisGraphic,\r\n    }, () => {\r\n      console.log(this.state.graphic);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"setting\">\r\n        <FontAwesomeIcon icon={this.state.graphic.icon} />\r\n        <h3>{this.state.graphic.type}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Setting;\r\n","import React, { Component } from \"react\";\r\nimport Setting from \"./Setting\";\r\n\r\nclass SettingContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSeason: \"summer\", // these values will come from props\r\n      isTime: \"eve\",\r\n      isColor: \"periwinkle_blue\",\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"settingContainer\">\r\n        {this.state.isSeason ? <Setting icon={this.state.isSeason} /> : \"\"}\r\n        {this.state.isTime ? <Setting icon={this.state.isTime} /> : \"\"}\r\n        {this.state.isColor ? <Setting icon={this.state.isColor} /> : \"\"}\r\n   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingContainer;\r\n","import React from 'react';\r\nimport m8 from '../assets/BM8.png';\r\n\r\nconst Logo = props => {\r\n  return (\r\n  <div className=\"logo\">\r\n    <div className=\"logoBorder\">\r\n       <img src={m8} alt=\"Bride Mate Logo\"></img>        \r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\r\nimport SettingContainer from \"./SettingContainer\";\r\nimport Logo from \"./Logo\";\r\n\r\nclass AppBar extends Component {\r\n  // Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  //Render\r\n  render() {\r\n    return (\r\n      <nav className=\"appBar\">\r\n          <button className=\"barLogo\">\r\n            <Logo onStartOver={this.props.onStartOver}/>\r\n          </button>\r\n        <SettingContainer />\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppBar;\r\n","import React, { Component } from \"react\";\r\nimport Logo from \"./Logo\";\r\n\r\nclass Splash extends Component {\r\n  // Constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n    return (\r\n      <section className=\"splash\">\r\n        <div className=\"splashLogo\">\r\n          <Logo />\r\n        </div>\r\n        <h1> WEDDING THEME IDEAS </h1>\r\n        <h3>\r\n          <span> 1 </span> invites <span> 2 </span> floral\r\n          <br></br>\r\n          <span> 3 </span> centerpieces \r\n          <br></br>\r\n          <span> 4 </span> tableware\r\n          <span> 5 </span> venue <span> 6 </span> cakes <br></br>\r\n          <span> 7 </span> favors \r\n          <span> 8 </span> patterns \r\n        </h3>\r\n        <button type=\"button\" onClick={this.props.onStart}>GET STARTED</button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Splash;\r\n","import React, { Component, Fragment } from \"react\";\nimport MainContainer from \"./components/MainContainer\";\nimport AppBar from \"./components/AppBar\";\nimport Splash from \"./components/Splash\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport \n{ faUmbrella, \n  faSnowflake, \n  faLeaf, \n  faSun,\n  faUmbrellaBeach,\n  faMoon,\n  faCloudRain,\n  faPalette \n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.scss\";\n\n    // setup icons\n    library.add(\n      fab,\n      faUmbrella,\n      faSnowflake,\n      faLeaf,\n      faSun,\n      faUmbrellaBeach,\n      faMoon,\n      faCloudRain,\n      faPalette\n    );\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isIntro: true,\n      season: '',\n      time: '',\n      colorSet: '',\n    }\n  }\n\n handleStart = () => {\n   this.setState({\n     isIntro: false,\n   })\n }\n\n handleStartOver = () => {\n   \n }\n\n\n  render() {\n    return (\n      <div className=\"wrapper App\">\n        {this.state.isIntro ? (\n          \"\"\n        ) : (\n          <Fragment>\n            <AppBar onStartOver={this.handleStartOver}/>\n            <hr></hr>\n          </Fragment>\n        )}\n        {this.state.isIntro ? <Splash onStart={this.handleStart}/> : <MainContainer />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}